"use strict";
function BillingAddressController(n, t, i, r, u) {
    function e() {
        if (angular.isDefined(f.config)) {
            var n = !f.config.disableBillingAddressCheckoutStep;
            f.requiredFields = {
                firstName: n,
                lastName: n,
                email: n,
                company: n && f.billingData.settings.companyEnabled !== !1 && f.billingData.settings.companyRequired,
                country: n && f.billingData.settings.countryEnabled !== !1,
                address1: n && f.billingData.settings.streetAddressEnabled !== !1 && f.billingData.settings.streetAddressRequired,
                address2: n && f.billingData.settings.streetAddress2Enabled !== !1 && f.billingData.settings.streetAddress2Required,
                zipPostalCode: n && f.billingData.settings.zipPostalCodeEnabled !== !1 && f.billingData.settings.zipPostalCodeRequired,
                phoneNumber: n && f.billingData.settings.phoneEnabled !== !1 && f.billingData.settings.phoneRequired,
                faxNumber: n && f.billingData.settings.faxEnabled !== !1 && f.billingData.settings.faxRequired
            }
        }
    }
    var f = this;
    f.billingData = {};
    f.configData = {};
    f.configData.shipToSameAddressDisabled = !1;
    f.shipToSameAddress = !1;
    f.addressAttributeChanged = function(n, t) {
        u.syncAttributeWithModel(t, n)
    }
    ;
    i.load(!0);
    f.buscaCEP = function() {
        var cep = $('#billingZipPostalCode').val().replace(/\D/g, "");
        var cepProgress = $("#billing-cep-loading-progress");
        cepProgress.show();
        if (cep.length == 8) {
            $.ajax({
                cache: false,
                type: "GET",
                url: "/Plugins/ShippingCorreios/GetAddresByCEP",
                data: {
                    "cep": cep
                },
                success: function (data) {
                    var n = i.get();
                    if (data.uf.length > 0) {
                        n.selectedBillingAddress.stateProvinceId = data.uf;
                        n.selectedBillingAddress.stateProvince.value = data.uf;
                        $('#billingStateProvince').val(data.uf);
                        $('#billingCity').focus();
                    }
                    if (data.cidade.length > 0) {
                        n.selectedBillingAddress.city = data.cidade;
                        $('#billingCity').val(data.cidade);                        
                        $('#billingAddress2').focus();
                    }
                    if (data.bairro.length > 0) {
                        n.selectedBillingAddress.address2 = data.bairro;
                        $('#billingAddress2').val(data.bairro);
                        $('#billingAddress1').focus();
                    }
                    if (data.end.length > 0) {
                        n.selectedBillingAddress.address1 = data.end;
                        $('#billingAddress1').val(data.end);                        
                        $('#billing_address_attribute_1').focus();
                    }
                    cepProgress.hide();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    cepProgress.hide();
                    alert('Cep n\u00e3o encontrado');
                    
                }
            });            
        }
        else
        {
            cepProgress.hide();
        }
        
    };    
    n.$on("refresh", function() {
        var n = i.get();
        angular.copy(n, f.billingData);
        !angular.isDefined(f.requiredFields) && angular.isDefined(f.billingData.settings) && e();
        f.billingData.selectedBillingAddress && f.billingData.selectedBillingAddress.customAddressAttributes && f.billingData.selectedBillingAddress.customAddressAttributes.length > 0 && !angular.isDefined(f.modelsData) && (f.modelsData = {},
        u.prepareDefaultSelectedValues(f.billingData.selectedBillingAddress, f.modelsData));
        u.hideOverlay(".billing-address-loader")
    });
    n.$on("configurationReady", function(n, i) {
        t.$evalAsync(function() {
            f.config = i;
            f.configData.shipToSameAddressDisabled = !f.config.hasProductsRequiringShipping;
            f.shipToSameAddress = f.config.shipToSameAddress;
            f.config.defaultBillingCountryId && f.billingData.selectedBillingAddress && f.billingData.selectedBillingAddress.country && (!f.billingData.selectedBillingAddress.country.value || f.billingData.selectedBillingAddress.country.value == "0") && (f.billingData.selectedBillingAddress.country.value = f.config.defaultBillingCountryId.toString())
        })
    });
    n.$on("togglePanel", function(n, t) {
        angular.isDefined(t.hasProductsRequiringShipping) && (f.configData.shipToSameAddressDisabled = !t.hasProductsRequiringShipping);
        angular.isDefined(t.pickUpInStore) && (f.configData.shipToSameAddressDisabled = t.pickUpInStore)
    });
    n.$on("setBillingAddressOverlay", function() {
        u.showOverlay(".billing-address-loader")
    });
    n.$on("prepareDefaultSelectedValuesForCustomAddressAttributes", function(n, i) {
        i.panel == "billing" && setTimeout(function() {
            t.$apply(function() {
                u.prepareDefaultSelectedValues(f.billingData.selectedBillingAddress, f.modelsData)
            })
        })
    });
    t.$watch("{address: vm.billingData.selectedBillingAddress, shipToSameAddress: vm.shipToSameAddress}", function(n, t) {
        n && t && i.set(n)
    }, !0);
    $(".billing-address .choose-address select").change(function() {
        n.$broadcast("addressChanged", {
            panel: "billing",
            shipToSameAddress: f.shipToSameAddress
        })
    })
}
angular.module("realOnePageCheckout.billingAddress").controller("BillingAddressController", BillingAddressController);
BillingAddressController.$inject = ["$rootScope", "$scope", "billingAddressContext", "dataConfig", "objectUtility"];

