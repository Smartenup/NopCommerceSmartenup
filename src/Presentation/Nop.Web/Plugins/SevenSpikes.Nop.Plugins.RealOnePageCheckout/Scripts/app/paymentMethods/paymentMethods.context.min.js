"use strict";function paymentMethodsContext(n,t,i,r,u,f){function c(i){return n.$broadcast("paymentMethodsContextChanging",{newPaymentMethodSelected:i,isMyRewardPointsChecked:e.useRewardPoints}),r.updatePaymentMethod(i).then(function(){n.$broadcast("paymentMethodsContextChanged",{newPaymentMethodSelected:i,isMyRewardPointsChecked:e.useRewardPoints})},function(i){return n.$broadcast("paymentMethodsContextChanged",{error:!0}),t.reject(i)})}function l(i){return n.$broadcast("paymentMethodsContextChanging",{useMyRewardPoints:i}),r.useMyRewardPoints(i).then(function(){n.$broadcast("paymentMethodsContextChanged",{useMyRewardPoints:i})},function(i){return n.$broadcast("paymentMethodsContextChanged",{error:!0}),t.reject(i)})}function s(i,u){setTimeout(function(){return u||(u=$('select[name="billingCountry"]').val()),n.$broadcast("paymentMethodsContextChanging",{initialLoad:i}),r.getPaymentMethods(u).then(function(t){if(e=t.data,e.selectedPaymentMethod={},e.paymentMethods.length>0){var r=$.grep(e.paymentMethods,function(n){return n.selected});r.length>0&&(e.selectedPaymentMethod=r[0])}o.setState(e);n.$broadcast("paymentMethodsContextChanged",{initialLoad:i})},function(n){return e=o.getLastState(),t.reject(n)})})}function a(){return e}function v(n){e&&(n.payment.paymentMethodSystemName!=e.selectedPaymentMethod.paymentMethodSystemName&&(angular.forEach(e.paymentMethods,function(t){t.paymentMethodSystemName==n.payment.paymentMethodSystemName&&(e.selectedPaymentMethod=t)}),c(n.payment)),n.useRewardPoints!=e.useRewardPoints&&(e.useRewardPoints=n.useRewardPoints,l(e.useRewardPoints)),o.setState(e))}var h={load:s,get:a,set:v},e,o=f.instance();return n.$on("resetPaymentMethodsData",function(n,t){e=undefined;t&&t.newCountryId?s(!1,t.newCountryId):s()}),h}angular.module("realOnePageCheckout.paymentMethods").factory("paymentMethodsContext",paymentMethodsContext);paymentMethodsContext.$inject=["$rootScope","$q","api","paymentMethodsService","objectUtility","stateHolder"];