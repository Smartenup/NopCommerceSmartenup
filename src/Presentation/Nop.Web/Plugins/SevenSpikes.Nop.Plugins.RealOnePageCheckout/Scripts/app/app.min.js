angular.module("realOnePageCheckout.utility", []);
angular.module("realOnePageCheckout.filters", []);
angular.module("realOnePageCheckout.dispatchers", []);
angular.module("realOnePageCheckout.configuration", []);
angular.module("realOnePageCheckout.shared", []);
angular.module("realOnePageCheckout.core", ["realOnePageCheckout.utility", "realOnePageCheckout.dispatchers", "realOnePageCheckout.filters", "realOnePageCheckout.shared", "realOnePageCheckout.configuration"]);
angular.module("realOnePageCheckout.billingAddress", ["realOnePageCheckout.core"]);
angular.module("realOnePageCheckout.shippingAddress", ["realOnePageCheckout.core"]);
angular.module("realOnePageCheckout.paymentMethods", ["realOnePageCheckout.core"]);
angular.module("realOnePageCheckout.shippingMethods", ["realOnePageCheckout.core"]);
angular.module("realOnePageCheckout.orderSummary", ["realOnePageCheckout.core"]);
angular.module("realOnePageCheckout.orderTotal", ["realOnePageCheckout.core"]);
angular.module("realOnePageCheckout.discountBox", ["realOnePageCheckout.core"]);
angular.module("realOnePageCheckout.giftCardBox", ["realOnePageCheckout.core"]);
angular.module("realOnePageCheckout.estimateShipping", ["realOnePageCheckout.core"]);
angular.module("realOnePageCheckout.checkoutAttributes", ["realOnePageCheckout.core"]);
angular.module("realOnePageCheckout.orderConfirm", ["realOnePageCheckout.core"]);
angular.module("realOnePageCheckout.pickupInStore", ["realOnePageCheckout.core"]);
angular.module("realOnePageCheckout.external", ["realOnePageCheckout.core"]);
var realOnePageCheckout = angular.module("realOnePageCheckout", ["realOnePageCheckout.core", "realOnePageCheckout.billingAddress", "realOnePageCheckout.shippingAddress", "realOnePageCheckout.paymentMethods", "realOnePageCheckout.shippingMethods", "realOnePageCheckout.orderSummary", "realOnePageCheckout.orderTotal", "realOnePageCheckout.discountBox", "realOnePageCheckout.giftCardBox", "realOnePageCheckout.estimateShipping", "realOnePageCheckout.checkoutAttributes", "realOnePageCheckout.orderConfirm", "realOnePageCheckout.pickupInStore", "realOnePageCheckout.external"]).config(["$provide", function (n) {
    var t = $("#storeLocation").val();
    n.value("storeLocation", t)
}
]).run(["dataDispatcher", function () { }
]);
realOnePageCheckout.config(["$httpProvider", function (n) {
    n.interceptors.push("RequestsErrorHandler");
    n.defaults.headers.get || (n.defaults.headers.get = {});
    n.defaults.headers.get["If-Modified-Since"] = "Mon, 31 Aug 1990 05:00:00 GMT"
}
]);
realOnePageCheckout.directive("panel", ["$rootScope", "storeLocation", function (n, t) {
    return {
        restrict: "E",
        scope: {},
        controller: ["$scope", "$element", "$attrs", function (t, i, r) {
            n.$broadcast("panelLoaded");
            t.title = r.title
        }
        ],
        templateUrl: function (i, r) {
            return n.$broadcast("panelLoading"),
                t + r.src
        }
    }
}
]);
realOnePageCheckout.directive("onFinishRendering", ["$timeout", function (n) {
    return {
        restrict: "A",
        link: function () {
            n(function () {
                $.event.trigger("checkoutAttributesLoaded")
            }, 0)
        }
    }
}
]);
realOnePageCheckout.directive("validSubmit", ["$parse", "$rootScope", function (n, t) {
    function i(n) {
        n.length == 0 ? t.$broadcast("submitForm", !0) : t.$broadcast("errorOccured", n)
    }
    return {
        require: "form",
        link: function (t, r, u, f) {
            f.sySubmitted = !1;
            var e = n(u.validSubmit);
            r.bind("keydown keypress", function (n) {
                if (n.which === 13)
                    return n.preventDefault(),
                        !1
            });
            r.on("submit", function (n) {
                t.$apply(function () {
                    var o, r, s, u, h;
                    if (f.sySubmitted = !0,
                        o = [],
                        f.$valid)
                        e(t, {
                            $event: n
                        }),
                            f.sySubmitted = !1;
                    else if (f.$error && f.$error.required) {
                        for (r = f.$error.required,
                            s = r.length,
                            u = 0; u < r.length; u++)
                            (r[u].$name == "billingForm" || r[u].$name == "shippingForm") && (s -= 1,
                                s += r[u].$error.required.length),
                                r[u].$name == "termsOfService" && (s -= 1,
                                    o.push($("#invalidFormMessageForTermsOfService").text()));
                        s > 0 && o.push($("#invalidFormMessage").text())
                    }
                    h = typeof externalValidation == "function";
                    h ? externalValidation(o, i) : i(o)
                })
            })
        }
    }
}
]);
realOnePageCheckout.directive("ngConfirmClick", [function () {
    return {
        restrict: "A",
        link: function (n, t, i) {
            t.bind("click", function () {
                var t = i.ngConfirmMessage;
                t && confirm(t) && n.$apply(i.ngConfirmClick)
            })
        }
    }
}
]);
realOnePageCheckout.factory("RequestsErrorHandler", ["$q", "$rootScope", function (n, t) {
    return {
        responseError: function (i) {
            var r = i.statusText + ". Please contact the store owner.";
            return t.$broadcast("errorOccured", r),
                n.reject(i)
        }
    }
}
]);
realOnePageCheckout.directive("placeholderAttr", function () {
    return {
        restrict: "A",
        scope: {
            placeholderAttr: "@"
        },
        link: function (n, t) {
            var i = navigator.userAgent.match(/MSIE/)
                , r = navigator.userAgent.match(/Trident\/7\./);
            i || r || n.$watch("placeholderAttr", function (n) {
                t.attr("placeholder", n)
            })
        }
    }
});
realOnePageCheckout.directive('validarCpfCnpj', function () {
    return {
        require: 'ngModel',
        link: function (scope, element, attr, mCtrl) {

            function testaCPFCNPJ(value) {

                if (value.replace(/\D/g, "").length == 11) {
                    if (valida_cpf(value))
                        mCtrl.$setValidity('cpf_cnpj', true);
                    else
                        mCtrl.$setValidity('cpf_cnpj', false);
                }
                else if (value.replace(/\D/g, "").length == 14) {
                    if (valida_cnpj(value))
                        mCtrl.$setValidity('cpf_cnpj', true);
                    else
                        mCtrl.$setValidity('cpf_cnpj', false);
                }
                else {
                    mCtrl.$setValidity('cpf_cnpj', false);
                }

                return value;
            };
            function valida_cnpj(value) {

                var i;
                var numero;
                var situacao = '';

                numero = value.replace(/\D/g, "");

                var s = numero;

                var c = s.substr(0, 12);
                var dv = s.substr(12, 2);
                var d1 = 0;

                for (i = 0; i < 12; i++) {
                    d1 += c.charAt(11 - i) * (2 + (i % 8));
                }

                if (d1 == 0) {
                    var result = "falso";
                }
                d1 = 11 - (d1 % 11);

                if (d1 > 9) d1 = 0;

                if (dv.charAt(0) != d1) {
                    var result = "falso";
                }

                d1 *= 2;
                for (i = 0; i < 12; i++) {
                    d1 += c.charAt(11 - i) * (2 + ((i + 1) % 8));
                }

                d1 = 11 - (d1 % 11);
                if (d1 > 9) d1 = 0;

                if (dv.charAt(1) != d1) {
                    var result = "falso";
                }

                if (result == "falso") {
                    return false;
                }

                return true;
            };
            function valida_cpf(value) {
                var i;
                var numero;

                numero = value.replace(/\D/g, "");

                var string = numero;
                var c = string.substr(0, 9);

                var dv = string.substr(9, 2);
                var d1 = 0;

                for (i = 0; i < 9; i++) {
                    d1 += c.charAt(i) * (10 - i);
                }

                if (d1 == 0) {
                    var result = "falso";
                }

                d1 = 11 - (d1 % 11);
                if (d1 > 9) d1 = 0;

                if (dv.charAt(0) != d1) {
                    var result = "falso";
                }

                d1 *= 2;
                for (i = 0; i < 9; i++) {
                    d1 += c.charAt(i) * (11 - i);
                }

                d1 = 11 - (d1 % 11);
                if (d1 > 9) d1 = 0;

                if (dv.charAt(1) != d1) {
                    var result = "falso";
                }

                if (result == "falso") {
                    return false;
                }

                return true;
            };

            if ((mCtrl.$name == "billing_address_attribute_3") || (mCtrl.$name == "shipping_address_attribute_3")) {
                mCtrl.$parsers.push(testaCPFCNPJ);
            }
        }
    }
});
realOnePageCheckout.directive('uiTelefone', function () {

    return {
        require: 'ngModel',
        link: function (scope, element, attr, ctrl) {
            var _formatTelefone = function (telefone) {

                //(99) 9999-9999 - 14dig
                //(99) 99999-9999 - 15dig
                telefone = telefone.replace(/[^0-9]+/g, "");
                if (telefone.length > 0) {
                    telefone = telefone.substring(-1, 0) + "(" + telefone.substring(0);
                }
                if (telefone.length > 3) {
                    telefone = telefone.substring(0, 3) + ") " + telefone.substring(3);
                }
                if (telefone.length == 13) {
                    telefone = telefone.substring(0, 9) + "-" + telefone.substring(9);

                } else if (telefone.length >= 14) {
                    telefone = telefone.substring(0, 10) + "-" + telefone.substring(10, 14);
                }

                return telefone;
            }

            element.bind('keyup', function () {
                ctrl.$setViewValue(_formatTelefone(ctrl.$viewValue));
                ctrl.$render();
            });

        }
    };

});
realOnePageCheckout.directive("map", ["$window", "$q", "$rootScope", function (n, t, i) {
    function u(n) {
        var t = document.createElement("script");
        t.src = "https://maps.googleapis.com/maps/api/js?sensor=false&callback=initialize&key=" + n;
        document.body.appendChild(t)
    }
    function f(i) {
        var r = t.defer();
        return n.initialize = function () {
            r.resolve()
        }
            ,
            u(i),
            r.promise
    }
    function r(t) {
        var f = new n.Map;
        n.google.maps.visualRefresh = !0;
        var r = new n.google.maps.Map(document.getElementById("map"), {
            zoom: 15,
            mapTypeId: n.google.maps.MapTypeId.ROADMAP
        })
            , e = new n.google.maps.Geocoder
            , u = new n.google.maps.InfoWindow;
        angular.forEach(t.pickupPoints, function (t, o) {
            var h = t.Id + "___" + t.ProviderSystemName, c = "<div class='pickup-point-info'><ul><li><strong>" + t.Name + "<\/strong><\/li><li>" + t.OpeningHours + "<\/li><li>" + t.PickupFee + "<\/li><\/ul><\/div>", s, l;
            t.Latitude && t.Longitude ? (s = new n.google.maps.Marker({
                map: r,
                title: t.Name,
                position: new n.google.maps.LatLng(t.Latitude, t.Longitude),
                pickUpPoint: t,
                icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
            }),
                f.set(h, s),
                n.google.maps.event.addListener(s, "click", function () {
                    $("#pickup-points-select").val(h);
                    u.setContent(c);
                    u.open(r, s);
                    i.$broadcast("pickupPointMarkerClicked", {
                        pickUpPoint: s.pickUpPoint
                    });
                    r.setCenter(s.getPosition())
                }),
                o == 0 && r.setCenter(s.getPosition())) : (l = t.Address + " " + t.City + " " + t.ZipPostalCode + " " + t.CountryName,
                    e.geocode({
                        address: l
                    }, function (e, s) {
                        if (s === n.google.maps.GeocoderStatus.OK) {
                            var l = new n.google.maps.Marker({
                                map: r,
                                title: t.Name,
                                position: e[0].geometry.location,
                                pickUpPoint: t,
                                icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                            });
                            f.set(h, l);
                            n.google.maps.event.addListener(l, "click", function () {
                                $("#pickup-points-select").val(h);
                                u.setContent(c);
                                u.open(r, l);
                                i.$broadcast("pickupPointMarkerClicked", {
                                    pickUpPoint: l.pickUpPoint
                                });
                                r.setCenter(l.getPosition())
                            });
                            o == 0 && r.setCenter(l.getPosition())
                        }
                    }))
        });
        $("#pickup-points-select").change(function () {
            new n.google.maps.event.trigger(f.get(this.value), "click")
        });
        n.google.maps.event.trigger(r, "resize")
    }
    return {
        restrict: "E",
        scope: {
            pickupPoints: "=",
            apiKey: "="
        },
        link: function (t) {
            if (!t.apiKey) {
                console.log("please provide an api key");
                return
            }
            n.google && n.google.maps ? r(t) : f(t.apiKey).then(function () {
                n.google && n.google.maps && r(t)
            }, function () {
                console.log("unable to load google maps")
            })
        }
    }
}
]);
